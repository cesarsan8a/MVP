{"version":3,"sources":["icons/leaf.png","icons/corn.png","icons/chilli.png","icons/rhubarb.png","icons/rural.svg","utils/items.js","components/Cell.js","components/Patch.js","components/Plants.js","components/VeggiePatch.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","ItemTypes","Cell","props","useState","typeOfPlant","setTypeOfPlant","useDrop","accept","drop","item","plant","collect","monitor","isOver","i","j","ref","className","style","gridArea","backgroundColor","src","Patch","noBorderHeight","height","noBorderWidth","width","x","y","cells","renderCell","push","gridTemplateColumns","gridTemplateRows","Plants","useDrag","type","isDragging","drag","opacity","VeggiePatch","Form","Group","controlId","Label","Control","as","chilli","rhubarb","leaf","corn","Component","App","Navbar","bg","variant","Brand","href","alt","logo","Nav","Link","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d99e00c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/leaf.b2482830.png\";","module.exports = __webpack_public_path__ + \"static/media/corn.cbf6aadb.png\";","module.exports = __webpack_public_path__ + \"static/media/chilli.58fe641d.png\";","module.exports = __webpack_public_path__ + \"static/media/rhubarb.77aa9670.png\";","module.exports = __webpack_public_path__ + \"static/media/rural.0044b5c2.svg\";","export const ItemTypes = {\n  PLANT: 'plant',\n}\n","import React, { useState } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { ItemTypes } from '../utils/items'\n\n\nfunction Cell (props) {\n\n  const [typeOfPlant, setTypeOfPlant] = useState(null);\n\n  // Dnd drop specs\n  const [{ isOver }, drop] = useDrop ({\n    accept: ItemTypes.PLANT,\n    drop: (item) => setTypeOfPlant(item.plant),\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n    })\n  })\n\n\n  const i = props.i;\n  const j = props.j;\n\n  return (\n    <div\n      ref={drop}\n      className=\"cell\"\n      style={{\n        gridArea: i / j / i + 1 / j + 1,\n        backgroundColor: isOver ? 'red' : '#569d36'\n      }}\n    >\n      <img src={typeOfPlant} className='cell-plant'/>\n    </div>\n  );\n}\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\nimport '../styles/Patch.css'\n\nfunction Patch (props) {\n  const noBorderHeight = props.height - 20; // the length of the border is 20px\n  const noBorderWidth = props.width - 20; // gets the length of the veggie patch\n\n  const x = noBorderWidth / 50; // coversion from px to m (1cm is 2px)\n  const y = noBorderHeight / 50; // x and y are the how many fractions the patch have to be divided\n\n  const cells = [];\n\n  const renderCell = (i, j) => {\n    return (\n      <Cell i={i} j={j}/>\n    );\n  }\n\n  for (let i = 1; i <= x ; i++) {\n    for (let j = 1; j <= y; j++){\n      cells.push(renderCell(i, j))\n    }\n  }\n\n\n  return (\n      <div className=\"frame-outer-outer\" style={{height: props.height + 'px', width: props.width + 'px'}}>\n          <div\n            className=\"patch\"\n            style={{\n              gridTemplateColumns: `repeat(${x}, 1fr)`,\n              gridTemplateRows: `repeat(${y}, 1fr)`,\n              width: noBorderWidth + 'px'\n            }}\n          >\n            {cells}\n          </div>\n      </div>\n  );\n}\n\nexport default Patch;\n","import React from 'react';\n\nimport { ItemTypes } from '../utils/items';\nimport { useDrag } from 'react-dnd';\n\nfunction Plants (props) {\n\n  //Dnd drag specs\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type: ItemTypes.PLANT, // setting the item type\n      plant: props.plant, // additional props\n    },\n    collect: monitor => ({ // collector function, what happens when it's being dragged\n      isDragging: !!monitor.isDragging()\n    })\n  });\n\n  return (\n    <div className=\"plant-container\" ref={drag} style={{opacity: isDragging ? '0.5' : '1'}}>\n      <img src={props.plant} className=\"plant-icon\" />\n    </div>\n  );\n}\n\nexport default Plants;\n","import React, { Component } from 'react';\nimport Patch from './Patch';\nimport Plants from './Plants';\nimport '../styles/VeggiePatch.css';\nimport Form from 'react-bootstrap/Form'\n\n// plant icons\nimport leaf from '../icons/leaf.png';\nimport corn from '../icons/corn.png';\nimport chilli from '../icons/chilli.png';\nimport rhubarb from '../icons/rhubarb.png';\n\n\n\nclass VeggiePatch extends Component {\n  render() {\n    return (\n      <div className=\"veggie-patch-container\">\n        <div className=\"form-container\">\n          <h3>My Veggies</h3>\n          <Form>\n            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n              <Form.Label>Select Month</Form.Label>\n              <Form.Control as=\"select\">\n                <option>January</option>\n                <option>February</option>\n                <option>March</option>\n                <option>April</option>\n                <option>May</option>\n                <option>June</option>\n                <option>July</option>\n                <option>August</option>\n                <option>September</option>\n                <option>October</option>\n                <option>November</option>\n                <option>December</option>\n              </Form.Control>\n            </Form.Group>\n          </Form>\n        </div>\n        <div className='all-plants-container'>\n          <Plants plant={chilli}/>\n          <Plants plant={rhubarb}/>\n          <Plants plant={leaf}/>\n          <Plants plant={corn}/>\n        </div>\n        <Patch height='220' width='220' />\n      </div>\n    );\n  }\n}\n\nexport default VeggiePatch;\n","import React from 'react';\nimport VeggiePatch from './VeggiePatch';\nimport '../styles/App.css'\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport logo from '../icons/rural.svg'\n\nfunction App() {\n  return (\n    <div className='container'>\n\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n          <img\n            alt=\"\"\n            src={logo}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          />{' '}\n          MVP - My Veggie Patch\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link>On Season</Nav.Link>\n          <Nav.Link>Vegetables and Herbs</Nav.Link>\n          <Nav.Link>Veggie Patch Planer</Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <br/>\n\n      <div className=\"body\">\n        <DndProvider backend={HTML5Backend}>\n          <VeggiePatch />\n        </DndProvider>\n      </div>\n\n      <br/>\n\n      <footer>MVP - 2020Â©</footer>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}